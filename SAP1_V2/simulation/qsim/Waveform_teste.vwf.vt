// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/17/2023 13:08:44"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          SAP1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module SAP1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg A;
reg B;
reg C;
reg CLKAUTO;
reg D;
reg D0;
reg D1;
reg D2;
reg D3;
reg D4;
reg D5;
reg D6;
reg D7;
reg ENAUTOADDRESS;
reg Etapa_Unica;
reg Limpar_Iniciar;
reg Manual_Automatico;
reg WRITE;
// wires                                               
wire CLK;
wire CLR_O;
wire DISPLAY0;
wire DISPLAY1;
wire DISPLAY2;
wire DISPLAY3;
wire DISPLAY4;
wire DISPLAY5;
wire DISPLAY6;
wire DISPLAY7;
wire NCLK;
wire NCLR_O;
wire O1;
wire O2;
wire O3;
wire O4;
wire O5;
wire O6;
wire O7;
wire O8;
wire SIGNAL_CP;
wire SIGNAL_EA;
wire SIGNAL_EP;
wire SIGNAL_EU;
wire SIGNAL_NCE;
wire SIGNAL_NEI;
wire SIGNAL_NHLT;
wire SIGNAL_NLA;
wire SIGNAL_NLB;
wire SIGNAL_NLI;
wire SIGNAL_NLM;
wire SIGNAL_NLO;
wire SIGNAL_SU;

// assign statements (if any)                          
SAP1 i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.C(C),
	.CLK(CLK),
	.CLKAUTO(CLKAUTO),
	.CLR_O(CLR_O),
	.D(D),
	.D0(D0),
	.D1(D1),
	.D2(D2),
	.D3(D3),
	.D4(D4),
	.D5(D5),
	.D6(D6),
	.D7(D7),
	.DISPLAY0(DISPLAY0),
	.DISPLAY1(DISPLAY1),
	.DISPLAY2(DISPLAY2),
	.DISPLAY3(DISPLAY3),
	.DISPLAY4(DISPLAY4),
	.DISPLAY5(DISPLAY5),
	.DISPLAY6(DISPLAY6),
	.DISPLAY7(DISPLAY7),
	.ENAUTOADDRESS(ENAUTOADDRESS),
	.Etapa_Unica(Etapa_Unica),
	.Limpar_Iniciar(Limpar_Iniciar),
	.Manual_Automatico(Manual_Automatico),
	.NCLK(NCLK),
	.NCLR_O(NCLR_O),
	.O1(O1),
	.O2(O2),
	.O3(O3),
	.O4(O4),
	.O5(O5),
	.O6(O6),
	.O7(O7),
	.O8(O8),
	.SIGNAL_CP(SIGNAL_CP),
	.SIGNAL_EA(SIGNAL_EA),
	.SIGNAL_EP(SIGNAL_EP),
	.SIGNAL_EU(SIGNAL_EU),
	.SIGNAL_NCE(SIGNAL_NCE),
	.SIGNAL_NEI(SIGNAL_NEI),
	.SIGNAL_NHLT(SIGNAL_NHLT),
	.SIGNAL_NLA(SIGNAL_NLA),
	.SIGNAL_NLB(SIGNAL_NLB),
	.SIGNAL_NLI(SIGNAL_NLI),
	.SIGNAL_NLM(SIGNAL_NLM),
	.SIGNAL_NLO(SIGNAL_NLO),
	.SIGNAL_SU(SIGNAL_SU),
	.WRITE(WRITE)
);
initial 
begin 
#1000000 $finish;
end 

// D
initial
begin
	D = 1'b0;
	D = #110000 1'b1;
	D = #10000 1'b0;
end 

// C
initial
begin
	C = 1'b0;
end 

// B
initial
begin
	B = 1'b0;
	B = #40000 1'b1;
	B = #20000 1'b0;
end 

// A
initial
begin
	A = 1'b0;
	A = #30000 1'b1;
	A = #10000 1'b0;
	A = #10000 1'b1;
	A = #10000 1'b0;
	A = #50000 1'b1;
	A = #10000 1'b0;
end 

// D7
initial
begin
	D7 = 1'b0;
	D7 = #40000 1'b1;
	D7 = #20000 1'b0;
end 

// D6
initial
begin
	D6 = 1'b0;
	D6 = #40000 1'b1;
	D6 = #20000 1'b0;
end 

// D5
initial
begin
	D5 = 1'b0;
	D5 = #40000 1'b1;
	D5 = #20000 1'b0;
end 

// D4
initial
begin
	D4 = 1'b0;
	D4 = #50000 1'b1;
	D4 = #10000 1'b0;
	D4 = #50000 1'b1;
	D4 = #10000 1'b0;
end 

// D3
initial
begin
	D3 = 1'b0;
	D3 = #30000 1'b1;
	D3 = #10000 1'b0;
end 

// D2
initial
begin
	D2 = 1'b0;
end 

// D1
initial
begin
	D1 = 1'b0;
end 

// D0
initial
begin
	D0 = 1'b0;
	D0 = #30000 1'b1;
	D0 = #10000 1'b0;
end 

// CLKAUTO
always
begin
	CLKAUTO = 1'b0;
	CLKAUTO = #5000 1'b1;
	#5000;
end 

// WRITE
initial
begin
	WRITE = 1'b1;
	WRITE = #150000 1'b0;
end 

// ENAUTOADDRESS
initial
begin
	ENAUTOADDRESS = 1'b0;
	ENAUTOADDRESS = #160000 1'b1;
end 
endmodule

