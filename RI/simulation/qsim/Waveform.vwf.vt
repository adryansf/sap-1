// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/01/2023 21:23:48"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          RI
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module RI_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg CLR;
reg ENABLE;
reg I0;
reg I1;
reg I2;
reg I3;
reg I4;
reg I5;
reg I6;
reg I7;
reg LOAD;
// wires                                               
wire O0;
wire O1;
wire O2;
wire O3;
wire O4;
wire O5;
wire O6;
wire O7;

// assign statements (if any)                          
RI i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.CLR(CLR),
	.ENABLE(ENABLE),
	.I0(I0),
	.I1(I1),
	.I2(I2),
	.I3(I3),
	.I4(I4),
	.I5(I5),
	.I6(I6),
	.I7(I7),
	.LOAD(LOAD),
	.O0(O0),
	.O1(O1),
	.O2(O2),
	.O3(O3),
	.O4(O4),
	.O5(O5),
	.O6(O6),
	.O7(O7)
);
initial 
begin 
#1000000 $finish;
end 

// I0
initial
begin
	I0 = 1'b1;
	I0 = #120000 1'b0;
end 

// I1
initial
begin
	I1 = 1'b0;
	I1 = #40000 1'b1;
	I1 = #200000 1'b0;
end 

// I2
initial
begin
	I2 = 1'b0;
	I2 = #80000 1'b1;
	I2 = #160000 1'b0;
	I2 = #80000 1'b1;
	I2 = #200000 1'b0;
end 

// I3
initial
begin
	I3 = 1'b0;
	I3 = #80000 1'b1;
	I3 = #160000 1'b0;
	I3 = #80000 1'b1;
	I3 = #200000 1'b0;
end 

// I4
initial
begin
	I4 = 1'b0;
	I4 = #80000 1'b1;
	I4 = #160000 1'b0;
	I4 = #80000 1'b1;
	I4 = #130000 1'b0;
end 

// I5
initial
begin
	I5 = 1'b0;
	I5 = #320000 1'b1;
	I5 = #240000 1'b0;
end 

// I6
initial
begin
	I6 = 1'b0;
	I6 = #320000 1'b1;
	I6 = #240000 1'b0;
end 

// I7
initial
begin
	I7 = 1'b0;
	I7 = #320000 1'b1;
	I7 = #80000 1'b0;
end 

// CLK
always
begin
	CLK = 1'b0;
	CLK = #10000 1'b1;
	#10000;
end 

// CLR
initial
begin
	CLR = 1'b0;
end 

// ENABLE
initial
begin
	ENABLE = 1'b0;
	ENABLE = #610000 1'b1;
end 

// LOAD
initial
begin
	LOAD = 1'b1;
	LOAD = #120000 1'b0;
	LOAD = #250000 1'b1;
	LOAD = #80000 1'b0;
	LOAD = #130000 1'b1;
end 
endmodule

